1 wget http://docs.projectcalico.org/v2.3/getting-started/kubernetes/installation/hosted/calico.yaml

2 修改 etcd

3  kubectl create -f calico.yaml

4 [root@kubernetes calico_new]# kubectl get pods -n kube-system
NAME                                        READY     STATUS    RESTARTS   AGE
calico-node-2dz49                           2/2       Running   0          17h
calico-node-60rdf                           2/2       Running   0          17h
calico-policy-controller-3020253993-4tx38   1/1       Running   0          17h

5 增加 RBAC权限
vim rule.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-policy-controller
  namespace: kube-system
rules:
  - apiGroups:
    - ""
    - extensions
    resources:
      - pods
      - namespaces
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-policy-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-policy-controller
subjects:
- kind: ServiceAccount
  name: calico-policy-controller
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-node
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources:
      - pods
      - nodes
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system
  
  
 6 权限查看 
 [root@kubernetes calico_new]# kubectl get clusterrolebindings
NAME                                           AGE
calico-node                                    16h
calico-policy-controller                       16h

7 修改kube-apiserver.service
[root@kubernetes calico_new]# vi /lib/systemd/system/kube-apiserver.service 
[Unit]
Description=Kubernetes API Service
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target
After=etcd.service

[Service]
EnvironmentFile=-/etc/kubernetes/env.sh
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/apiserver
ExecStart=/usr/local/bin/kube-apiserver       \
 --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
 --advertise-address=${MASTER_IP} \
 --bind-address=${MASTER_IP} \
 --insecure-bind-address=${MASTER_IP} \
 --authorization-mode=RBAC \
 --runtime-config=rbac.authorization.k8s.io/v1alpha1 \
 --kubelet-https=true \
 --experimental-bootstrap-token-auth \
 --token-auth-file=/etc/kubernetes/token.csv \
 --service-cluster-ip-range=${SERVICE_CIDR} \
 --service-node-port-range=${NODE_PORT_RANGE} \
 --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem \
 --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
 --client-ca-file=/etc/kubernetes/ssl/ca.pem \
 --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \
 --etcd-cafile=/etc/kubernetes/ssl/ca.pem \
 --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem \
 --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem \
 --etcd-servers=${ETCD_ENDPOINTS} \
 --enable-swagger-ui=true \
 --allow-privileged=true \
 --apiserver-count=3 \
 --audit-log-maxage=30 \
 --audit-log-maxbackup=3 \
 --audit-log-maxsize=100 \
 --audit-log-path=/var/lib/audit.log \
 --event-ttl=1h \
 --v=2
 
 7  配置环境变量文件 /etc/kubernetes/env.sh
 [root@kubernetes calico_new]# cat /etc/kubernetes/env.sh
BOOTSTRAP_TOKEN="3dc3d7185d153eb17277ca0bc9366513" 
SERVICE_CIDR="192.168.244.0/22"
CLUSTER_CIDR="10.10.6.0/24"
NODE_PORT_RANGE="1-65535"
ETCD_ENDPOINTS="http://10.10.0.70:2379,http://10.10.0.73:2379,http://10.10.0.74:2379"
CLUSTER_KUBERNETES_SVC_IP="192.168.244.1"
CLUSTER_DNS_SVC_IP="192.168.244.2"
CLUSTER_DNS_DOMAIN="cluster.local."
NODE_NAME=etcd-host0
NODE_IP=10.10.0.70
NODE_IPS="10.10.0.70,10.10.0.73,10.10.0.74"
ETCD_NODES=etcd-host0=http://10.10.0.70:2380,etcd-host1=http://10.10.0.73:2380,etcd-host2=http://10.10.0.74:2380
MASTER_IP=10.10.0.70
KUBE_APISERVER="https://${MASTER_IP}:6443"

8 配置kubelet.service文件
[root@kubernetes calico_new]# vi /usr/lib/systemd/system/kubelet.service 
[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://github.com/googleCloudPlatform/kubernetes
After=docker.service
Requires=docker.service

[Service]
WorkingDirectory=/var/lib/kubelet
EnvironmentFile=-/etc/kubernetes/env.sh
ExecStart=/usr/bin/kubelet \
 --api-servers=http://10.10.0.70:8080 \
 --address=${NODE_IP} \
 --hostname-override=${NODE_IP} \
 --pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest \
 --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \
 --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \
 --require-kubeconfig \
 --cert-dir=/etc/kubernetes/ssl \
 --cluster-dns=${CLUSTER_DNS_SVC_IP} \
 --cluster-domain=${CLUSTER_DNS_DOMAIN} \
 --hairpin-mode promiscuous-bridge \
 --allow-privileged=true \
 --serialize-image-pulls=false \
 --logtostderr=true \
 --cgroup-driver=systemd \
 --v=2 \
 --allow-privileged=true \
 --network-plugin=cni \
 --network-plugin-dir=/etc/cni/net.d \
 --cni-conf-dir=/etc/cni/net.d \
 --cni-bin-dir=/opt/cni/bin

ExecStopPost=/usr/sbin/iptables -A INPUT -s 172.16.0.0/12  -p tcp --dport 4194 -j ACCEPT
ExecStopPost=/usr/sbin/iptables -A INPUT -s 10.0.0.0/8     -p tcp --dport 4194 -j ACCEPT
ExecStopPost=/usr/sbin/iptables -A INPUT -s 192.168.0.0/16 -p tcp --dport 4194 -j ACCEPT
ExecStopPost=/usr/sbin/iptables -A INPUT                   -p tcp --dport 4194 -j DROP

Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target


9 下载cni 插件    (kubelet cni插件在所有机器上都要安装，用于calico打路由)
wget -N -P /opt/cni/bin https://github.com/projectcalico/cni-plugin/releases/download/v1.9.1/calico
wget -N -P /opt/cni/bin https://github.com/projectcalico/cni-plugin/releases/download/v1.9.1/calico-ipam
chmod +x /opt/cni/bin/calico /opt/cni/bin/calico-ipam
wget https://github.com/projectcalico/calicoctl/releases/download/v1.3.0/calicoctl
chmod +x calicoctl

wget https://github.com/containernetworking/cni/releases/download/v0.4.0/cni-v0.4.0.tgz
tar -zxvf cni-v0.4.0.tgz
cp loopback /opt/cni/bin/


10 生成pod 测试 
#centos-rcd.yaml
apiVersion: v1
kind: ReplicationController
metadata:
  name: centos
  labels:
    name: centos
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: centos
    spec:
      containers:
      - name: centos
        image: index.tenxcloud.com/tenxcloud/docker-centos
        ports:
        - containerPort: 6379
      nodeSelector:
        kubernetes.io/hostname: "192.168.99.130"
        
2、部署redis，指定部署在192.168.99.131节点上，redis-rc.yaml如下：

apiVersion: v1
kind: ReplicationController
metadata:
  name: redis
  labels:
    k8s-app: redis
spec:
  replicas: 1
  selector:
    k8s-app: redis
  template:
    metadata:
      labels:
        k8s-app: redis
    spec:
      containers:
      - name: redis
        image: 10.10.30.166/public/redis:v1
        ports:
        - containerPort: 6379
          name: redis-tcp
          protocol: TCP
      nodeSelector:
        kubernetes.io/hostname: "192.168.99.131"
redis-svc.yaml如下：

apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    k8s-app: redis
  clusterIP: 10.254.159.20
  ports:
  - name: "1"
    port: 6379
    protocol: TCP        

11 机器上路由
[root@kubernetes calico_new]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         115.182.58.1    0.0.0.0         UG    425    0        0 eth0
10.10.0.0       0.0.0.0         255.255.248.0   U     425    0        0 eth1
10.10.64.0      0.0.0.0         255.255.254.0   U     425    0        0 eth2
10.10.254.0     0.0.0.0         255.255.255.192 U     0      0        0 *
10.10.254.22    0.0.0.0         255.255.255.255 UH    0      0        0 calie6777031d6e


[root@node1 ~]# route -n 
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         115.182.58.1    0.0.0.0         UG    425    0        0 eth0
10.10.0.0       0.0.0.0         255.255.248.0   U     425    0        0 eth1
10.10.64.0      0.0.0.0         255.255.254.0   U     425    0        0 eth2
10.10.254.0     10.10.0.70      255.255.255.192 UG    0      0        0 eth1
10.10.254.192   0.0.0.0         255.255.255.192 U     0      0        0 *
10.10.254.215   0.0.0.0         255.255.255.255 UH    0      0        0 calia9ad2aa4efb
10.10.254.216   0.0.0.0         255.255.255.255 UH    0      0        0 calid81dca27a3d


 
 


